import logging
import logging.handlers
import ConfigParser
from pymongo import MongoClient
from building import Building
import csv
# danzi.tn@20160312 import solo delle PK di riferimento sui building
# create main logger
logger = logging.getLogger('smt_main')
logger.setLevel(logging.INFO)
# create a rotating file handler which logs even debug messages 
fh = logging.handlers.RotatingFileHandler('export_building_vulnerability.log',maxBytes=5000000, backupCount=5)
fh.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s')
fh.setFormatter(formatter)
logger.addHandler(fh)
# reading config file
sCFGName = 'smt.cfg'
smtConfig = ConfigParser.RawConfigParser()
smtConfig.read(sCFGName)
# setup DB parameter
host = smtConfig.get('MONGODB','host')
database = smtConfig.get('MONGODB','database')
source_database = smtConfig.get('MONGODB','source_database')
username = smtConfig.get('MONGODB','username')
password = smtConfig.get('MONGODB','password')
# connect to MongoDB
client = MongoClient()
db = client[database]
# DB authentication
db.authenticate(username,password,source=source_database)
# EXPORT BUILDINGS VULNERABLILTY
txtFilePath =  "../data/Edifici_Vulnerabilita.csv"
logger = logging.getLogger('smt_main.export_building_vulnerability')
with open(txtFilePath, 'wb') as out_csvfile:
    writer = csv.writer(out_csvfile,delimiter=";")
    header = ["bldg_code","vulnerability"]
    writer.writerow(header)
    bcurr = Building.find(db, {"vulnerability":{"$exists":True}})
    if bcurr.count == 0:
        logger.error("No Buildings with vulnerability found!")
    for bItem in bcurr:
        building = Building(db,bItem)
        building.load()
        row=[building.item["bldg_code"],building.item["vulnerability"]]
        writer.writerow(row)
    logger.info("Buildings vulnerability Exported")